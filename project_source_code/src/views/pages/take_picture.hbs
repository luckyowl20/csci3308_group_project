<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Webcam Capture</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    #video, #canvas {
      width: 100%;
      max-width: 400px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    #canvas {
      display: none;
    }
    #retake, #uploadBtn {
      display: none;
    }
  </style>
</head>
<body class="container py-5 text-center">
  <h2 class="mb-4">Webcam Snapshot</h2>

  <video id="video" autoplay playsinline class="mb-3"></video>
  <canvas id="canvas" class="mb-3"></canvas>

  <form id="uploadForm">
    <div class="mb-3">
      <button type="button" id="snap" class="btn btn-primary me-2">Snap</button>
      <button type="button" id="retake" class="btn btn-secondary me-2">Retake</button>
      <button type="button" id="uploadBtn" class="btn btn-success">Upload</button>
    </div>
  </form>

  <script>
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const snap = document.getElementById('snap');
    const retake = document.getElementById('retake');
    const uploadBtn = document.getElementById('uploadBtn');
    const ctx = canvas.getContext('2d');
    let stream = null;
    let capturedBlob = null;

    function startCamera() {
      navigator.mediaDevices.getUserMedia({ video: true })
        .then(s => {
          stream = s;
          video.srcObject = stream;
        })
        .catch(() => alert('Webcam access is required.'));
    }

    function stopCamera() {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
        stream = null;
      }
    }

    startCamera();

    snap.addEventListener('click', () => {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      ctx.drawImage(video, 0, 0);

      canvas.toBlob((blob) => {
        capturedBlob = blob;
      }, 'image/png');

      video.style.display = 'none';
      canvas.style.display = 'block';
      snap.style.display = 'none';
      retake.style.display = 'inline-block';
      uploadBtn.style.display = 'inline-block';
    });

    retake.addEventListener('click', () => {
      startCamera();
      canvas.style.display = 'none';
      video.style.display = 'block';
      snap.style.display = 'inline-block';
      retake.style.display = 'none';
      uploadBtn.style.display = 'none';
      capturedBlob = null;
    });

    uploadBtn.addEventListener('click', async () => {
      if (!capturedBlob) {
        return alert('Take a picture first!');
      }

      const formData = new FormData();
      formData.append('file', capturedBlob, 'picture.png');

      try {
        const res = await fetch('/take_picture', {
          method: 'POST',
          body: formData
        });

        const result = await res.json();

        if (res.ok) {
          alert('Upload successful! Public URL: ' + result.url);
        } else {
          throw new Error(result.message || 'Upload failed');
        }
      } catch (err) {
        console.error('Upload error:', err);
        alert('Upload failed');
      }
    });
  </script>
</body>
</html>
